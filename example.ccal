
#import testing as test, testing2 as test2 from test.ccal

#define DEBUG \
    1
#macro TESTMACRO(a, b) a##b
    
pattern(n):
    match (1):
        return 1
    match (x):
        return @F(x-1) * x

Test2 public class:
    pass

Test3 class{
}

Test private class extends Test2:
/*
    An example class
*/
    
    init(val=2):
        let result = testing() + val

        ~: // assume that result can only possibly be greater than 0
            result > 0

        *: // if it is possible for result to be less than 1, throw an error
            result < 1

    uninit:
        pass


    "+" public operator("binary", "right", "postfix", 2, Object other):
        return first + other.value

    testing private function () -> Int:
        return 2



if @Z:
    let x = Test()
